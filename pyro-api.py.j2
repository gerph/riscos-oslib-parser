"""
Pyromaniac API template.
"""

# Expected to be included within the `riscos/api/__init__.py` source.

{%- macro extract_swi_name(swi) -%}
{%- if swi.name.split('_') > 1 -%}
{%- set parts = swi.name.split('_') -%}
{{ parts[0] }}_{{ parts[1] }}
{%- else -%}
{{ swi.name }}
{%- endif -%}
{%- endmacro -%}

{%- macro register_definition(reg) -%}
{%- if reg.assign == '?' -%}
  {{ reg.reg }} corrupted
{%- elif reg.assign == '#' -%}
  {%- if reg.name[0] == "'" -%}
    {{ reg.reg }} = {{ reg.name }} (constant word)
  {%- else -%}
    {{ reg.reg }} = {{ '&%x'|format(reg.name) }} (constant)
  {%- endif -%}
{%- else -%}
  {{ reg.reg }} {{ reg.assign }} {{ reg.name }} ({{reg.dtype}})
{%- endif -%}
{%- endmacro %}

{%- macro register_return(reg) -%}
{%- if reg.assign == '->' -%}
 {%- if reg.dtype|lower == '.string' -%}
  self.ro.memory[rout[{{ reg.reg[1:] }}]].string  # {{ reg.dtype }}
 {%- else -%}
  self.ro.memory[rout[{{ reg.reg[1:] }}]]  # {{ reg.dtype }}
 {%- endif -%}
{%- else -%}
 rout[{{ reg.reg[1:] }}]  # {{ reg.dtype }}
{%- endif -%}
{%- endmacro %}

{% for defmod in defmods %}
    ################# {{ defmod.name }} methods ######################################
{%- for name, swi in defmod.interfaces.items() %}
    def {{ swi.name|lower }}(self
{%- if swi.entry -%}
{%- for reg in swi.entry -%}
{%- if reg.assign != '#' -%}
,
         {{ ' ' * swi.name|length }}{{reg.name}}
{%- endif -%}
{%- endfor %}
{%- else -%}
{%- endif %}):
        """
{%- if swi.description %}
        {{ swi.description }}

{%- endif %}
{%- if swi.entry %}
{% for reg in swi.entry %}
        {{ '=>' if loop.first else '  ' }}  {{ register_definition(reg) }}
{%- endfor %}
{%- endif %}
{%- if swi.exit %}
{% for reg in swi.exit %}
        {{ '<=' if loop.first else '  ' }}  {{ register_definition(reg) }}
{%- endfor %}
{%- endif %}
        """
        rout = self.swi(swis.{{ extract_swi_name(swi) }}
{%- if swi.entry -%}
{%- for reg in swi.entry -%}
{{ ',\n                        regs={' if loop.first else '\n                              ' }}{{ reg.reg[1:] }}: {{ reg.name }}
{%- endfor -%}
})
{%- else -%}
)
{%- endif %}

{%- if swi.exit %}
{%- for reg in swi.exit -%}
{%- if reg.name and reg.reg.startswith('R') %}
        {{ reg.name }} = {{ register_return(reg) }}
{%- endif -%}
{%- endfor %}
{%- endif %}

{%- if swi.exit %}
        return (
{%- for reg in swi.exit -%}
{%- if reg.name and reg.reg.startswith('R') -%}
{{ '' if loop.first else ', ' }}{{ reg.name }}
{%- endif -%}
{%- endfor -%}
)
{%- endif %}
{% endfor -%}
{%- endfor -%}
