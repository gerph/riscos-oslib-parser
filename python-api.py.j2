"""
Python API template - probably needs modification before use.
"""

{%- macro ctypes_name(dtype) -%}
 {%- if dtype == '.Any' -%}
  ctypes.c_void_p
 {%- elif dtype == '.Bool' -%}
  ctypes.c_int
 {%- elif dtype == '.Int' -%}
  ctypes.c_int
 {%- elif dtype == '.Short' -%}
  ctypes.c_int16
 {%- elif dtype == '.Bits' -%}
  ctypes.c_uint
 {%- elif dtype == '.Char' -%}
  ctypes.c_char
 {%- elif dtype == '.Byte' -%}
  ctypes.c_byte
 {%- elif dtype == '&.String' -%}
  ctypes.c_char_p
 {%- elif dtype.__class__.__name__ in ('Array') -%}
  {{ ctypes_name(dtype.dtype) }} * {{ dtype.nelements }}
 {%- elif dtype.__class__.__name__ in ('Union', 'Struct') -%}
  {{ dtype.name or "<unknown name of a " + dtype.__class__.__name__ + ">" }}
 {%- else -%}
  {# It might be a type we can immediately dereference #}
  {%- if dtype in types -%}
   {{ dtype }}
  {%- else -%}
   "unknown type {{ dtype }}"
  {%- endif -%}
 {%- endif -%}
{%- endmacro -%}

{% for typename, type in types.items()|sort %}
{# Type: {{ typename }}  {{ type }} #}
{% if type.__class__.__name__ in ('Struct', 'Union') -%}
class {{ typename }}({{ "ctypes.Structure" if type.__class__.__name__ == 'Struct' else "ctypes.Union" }}):
    _fields_ = [
{%- for member in type.members %}
            ("{{ member.name }}", {{ ctypes_name(member.dtype) }}), {#- {{ member.dtype }} #}
{%- endfor %}
        ]
{%- elif type.__class__.__name__ == 'str' and type[0] == '.' -%}
{{ typename }} = {{ ctypes_name(type) }}
{%- endif -%}
{%- endfor %}



{%- macro extract_swi_name(swi) -%}
{%- if swi.name.split('_') > 1 -%}
{%- set parts = swi.name.split('_') -%}
{{ parts[0] }}_{{ parts[1] }}
{%- else -%}
{{ swi.name }}
{%- endif -%}
{%- endmacro -%}

{%- macro register_definition(reg) -%}
{%- if reg.assign == '?' -%}
  {{ reg.reg }} corrupted
{%- elif reg.assign == '#' -%}
  {%- if reg.name[0] == "'" -%}
    {{ reg.reg }} = {{ reg.name }} (constant word)
  {%- else -%}
    {{ reg.reg }} = {{ '&%x'|format(reg.name) }} (constant)
  {%- endif -%}
{%- else -%}
  {{ reg.reg }} {{ reg.assign }} {{ reg.name }} ({{reg.dtype}})
{%- endif -%}
{%- endmacro %}

{%- macro register_description(reg) -%}
{%- if reg.assign == '?' -%}
{%- elif reg.assign == '#' -%}
 corrupted
{%- elif reg.assign == '#' -%}
  {%- if reg.name[0] == "'" -%}
    {{ reg.name }} (constant word)
  {%- else -%}
    {{ reg.name }} (constant word)
  {%- endif -%}
{%- else -%}
  {{ reg.name }} ({{reg.dtype}})
{%- endif -%}
{%- endmacro -%}

{%- macro register_return(reg) -%}
{%- if reg.assign == '->' -%}
 {%- if reg.dtype|lower == '.string' -%}
  self.ro.memory[rout[{{ reg.reg[1:] }}]].string  # {{ reg.dtype }}
 {%- else -%}
  self.ro.memory[rout[{{ reg.reg[1:] }}]]  # {{ reg.dtype }}
 {%- endif -%}
{%- else -%}
 rout[{{ reg.reg[1:] }}]  # {{ reg.dtype }}
{%- endif -%}
{%- endmacro %}

{% if 0 %}
class API(object):
{% for defmod in defmods %}
    ################# {{ defmod.name }} methods ######################################
{%- for name, swi in defmod.interfaces.items()|sort %}
    def {{ swi.name|lower }}(self
{%- if swi.entry -%}
{%- for reg in swi.entry -%}
{%- if reg.assign != '#' -%}
,
         {{ ' ' * swi.name|length }}{{reg.name}}
{%- endif -%}
{%- endfor %}
{%- else -%}
{%- endif %}):
        """
{%- if swi.description %}
        {{ swi.description }}

{%- endif %}
{%- if swi.entry %}
{% for reg in swi.entry %}
{%- if reg.assign != '#' %}
        @param {{ '{:<12s}'.format(reg.name + ': ') }}{{ register_description(reg) }}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- if swi.exit %}
        @return: Tuple of (
{%- for reg in swi.exit -%}
{{ '' if loop.first else ', ' }}{{ reg.name }}
{%- endfor -%}
)
{%- endif %}
        """
{%- if swi.entry %}
{% for reg in swi.entry %}
        # {{ '=>' if loop.first else '  ' }}  {{ register_definition(reg) }}
{%- endfor -%}
{%- endif %}
{% if swi.exit -%}
{%- for reg in swi.exit %}
        # {{ '<=' if loop.first else '  ' }}  {{ register_definition(reg) }}
{%- endfor %}
{%- endif %}
        rout = self.swi(swis.{{ extract_swi_name(swi) }}
{%- if swi.entry -%}
{%- for reg in swi.entry -%}
{{ ',\n                        regs={' if loop.first else ',\n                              ' }}{{ reg.reg[1:] }}: {{ reg.name }}
{%- endfor -%}
})
{%- else -%}
)
{%- endif %}

{%- if swi.exit %}
{%- for reg in swi.exit -%}
{%- if reg.name and reg.reg.startswith('R') %}
        {{ reg.name }} = {{ register_return(reg) }}
{%- endif -%}
{%- endfor %}
{%- endif %}

{%- if swi.exit %}
        return (
{%- for reg in swi.exit -%}
{%- if reg.name and reg.reg.startswith('R') -%}
{{ '' if loop.first else ', ' }}{{ reg.name }}
{%- endif -%}
{%- endfor -%}
)
{%- endif %}
{% endfor -%}
{%- endfor -%}
{% endif %}
