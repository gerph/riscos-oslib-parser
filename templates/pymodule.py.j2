"""
Python module.
"""

from riscos.modules.pymodules import PyModule
from riscos.errors import RISCOSSyntheticError

{%- macro register_definition(reg) -%}
{%- if reg.assign == '?' -%}
  {{ reg.reg }} corrupted
{%- elif reg.assign == '#' -%}
  {%- if reg.name[0] == "'" -%}
    {{ reg.reg }} = {{ reg.name }} (constant word)
  {%- else -%}
    {{ reg.reg }} = {{ '&%x'|format(reg.name) }} (constant)
  {%- endif -%}
{%- else -%}
  {{ reg.reg }} {{ reg.assign }} {{ reg.name }}
{%- endif -%}
{%- endmacro %}


{% for defmod in defmods -%}
class {{ defmod.name }}(PyModule):
    version = '0.01'
    date = '{{ timestamp(now(), "%d %b %Y") }}'
{%- set swis = [] -%}
{%- if defmod.swis %}
{%- set swis = defmod.modswis|dictsort()|list() %}
{%- for swi in swis -%}
  {%- if swi[0] < 512 and not defmod.name.lower().startswith('os') -%}
    {{ swis.remove(swi) or '' }}
  {%- endif -%}
{%- endfor -%}
{# Ensure that the SWIs that are listed have gaps #}
{%- set gapped_swis = [] -%}
{%- for swi in swis -%}
  {%- set last_swinum = gapped_swis[-1][0] if (gapped_swis|length) else -1 -%}
  {%- if last_swinum != -1 and swi[0] != last_swinum + 1 -%}
    {# Need to insert a gap #}
    {%- for n in range(swi[0] - (last_swinum + 1)) -%}
      {{ gapped_swis.append((last_swinum + 1 + n, [])) or '' }}
    {%- endfor -%}
  {%- endif -%}
  {{ gapped_swis.append(swi) or '' }}
{%- endfor -%}
{%- set swis = gapped_swis -%}
{%- endif -%}
{%- if swis %}
{%- set first_swi = swis[0][1] %}
{%- set swi_base = swis[0][0] %}
    swi_base = 0x{{ '%x'|format(swi_base) }}
    swi_prefix = "{{ first_swi[0].name.split('_')[0] }}"
    swi_names = [
{%- for swi, swilist in swis -%}
    {%- if swilist|length %}
            "{{ swilist[0].name.split('_', 1)[1] }}",
    {%- else %}
            "{{ swi - swi_base }}",
    {%- endif -%}
{%- endfor %}
        ]
{%- else %}
    # No SWIs defined
{%- endif %}

    def __init__(self, ro, module):
        super({{ defmod.name }}, self).__init__(ro, module)
        self.swi_dispatch = {
{%- for swi, swilist in swis %}
 {%- if not loop.last -%}
  {%- set comma=',' -%}
 {%- else -%}
  {%- set comma='' -%}
 {%- endif %}
 {%- if swilist|length %}
                {{ swi - swi_base }}: self.swi_{{ swilist[0].name|lower() }}{{ comma }}
 {%- endif %}
{%- endfor %}
            }

{%- if defmod.swis %}

    def swi(self, offset, regs):
        func = self.swi_dispatch.get(offset, None)
        if func:
            return func(regs)

        return False

{%- for swi, swilist in swis %}
 {%- if swilist|length %}
{% set baseswi = swilist[0] %}
    def swi_{{ swilist[0].name|lower() }}(self, regs):
        """
        {{ baseswi.name }} - {{ baseswi.description }}
{%- if baseswi.entry %}
{% for reg in baseswi.entry %}
        {{ '=>' if loop.first else '  ' }}  {{ register_definition(reg) }}
{%- endfor %}
{%- endif %}
{%- if baseswi.exit %}
{% for reg in baseswi.exit %}
        {{ '<=' if loop.first else '  ' }}  {{ register_definition(reg) }}
{%- endfor %}
{%- endif %}
        """
{%- for regs in baseswi.entry %}
{%- if regs.assign == '#' %}
        # {{ regs.reg }} is {{ regs.name }}
{%- elif regs.assign == '->' %}
 {%- if regs.dtype == '.String' %}
        {{ regs.name }} = self.ro.memory[regs[{{regs.reg[1:]}}]].string
 {%- else %}
        {{ regs.name }} = self.ro.memory[regs[{{regs.reg[1:]}}]]
 {%- endif %}
{%- elif regs.assign == '=' %}
        {{ regs.name }} = regs[{{regs.reg[1:]}}]
{%- endif %}
{%- endfor %}
        # FIXME: Not yet implemented
{%- for reg in baseswi.exit %}
{%- if reg.assign == '?' %}
        # {{ reg.reg }} corrupted
{%- elif reg.assign == '#' %}
        # regs[{{reg.reg[1:]}}] = 0x{{ '%x'|format(reg.name) }}
{%- else %}
        # regs[{{reg.reg[1:]}}] = {{ reg.name }}  # {{ reg.dtype }}
{%- endif %}
{%- endfor %}
        return False
{%- endif %}
{%- endfor %}
{%- endif %}


{% endfor %}
